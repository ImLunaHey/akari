import { useMemo } from 'react';

import { MethodCard } from '@/components/MethodCard';
import { slugify } from '@/lib/slugify';
import type { DocumentationIndex, PackageDoc, TypeReferenceIndex } from '@/types';

type DocsAppProps = {
  docs: DocumentationIndex;
  siteTitle: string;
  introduction?: string;
};

const formatGeneratedAt = (value: string) => {
  const timestamp = new Date(value);
  if (Number.isNaN(timestamp.getTime())) {
    return value;
  }

  return timestamp.toLocaleString(undefined, {
    dateStyle: 'medium',
    timeStyle: 'short',
  });
};

const renderNavigation = (packages: PackageDoc[]) => {
  return (
    <nav aria-label="Documentation navigation">
      <ul>
        {packages.map((pkg) => (
          <li key={pkg.slug}>
            <a href={`#${pkg.slug}`}>{pkg.title}</a>
            <ul>
              {pkg.classes.map((classDoc) => (
                <li key={`${pkg.slug}-${classDoc.name}`}>
                  <a href={`#${pkg.slug}-${slugify(classDoc.name)}`}>{classDoc.name}</a>
                </li>
              ))}
              {pkg.functions.map((fn) => (
                <li key={`${pkg.slug}-${fn.name}`}>
                  <a href={`#${pkg.slug}-fn-${slugify(fn.name)}`}>{fn.name}</a>
                </li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
    </nav>
  );
};

const buildTypeIndex = (packages: PackageDoc[]): TypeReferenceIndex => {
  const index: TypeReferenceIndex = {};

  for (const pkg of packages) {
    for (const classDoc of pkg.classes) {
      index[classDoc.name] = `${pkg.slug}-${slugify(classDoc.name)}`;
    }

    for (const fn of pkg.functions) {
      index[fn.name] = `${pkg.slug}-fn-${slugify(fn.name)}`;
    }
  }

  return index;
};

const App = ({ docs, siteTitle, introduction }: DocsAppProps) => {
  const { packages, generatedAt } = docs;
  const typeIndex = useMemo(() => buildTypeIndex(packages), [packages]);

  if (packages.length === 0) {
    return (
      <div className="app-shell">
        <aside className="sidebar">
          <h1>{siteTitle}</h1>
          {introduction ? <p>{introduction}</p> : null}
        </aside>
        <main className="content">
          <header className="header">
            <h2>Autogenerated from JSDoc comments</h2>
            <time dateTime={generatedAt}>Generated on {formatGeneratedAt(generatedAt)}</time>
          </header>
          <p className="empty-state">No public exports were discovered for this package.</p>
        </main>
      </div>
    );
  }

  return (
    <div className="app-shell">
      <aside className="sidebar">
        <h1>{siteTitle}</h1>
        {introduction ? <p>{introduction}</p> : null}
        {renderNavigation(packages)}
      </aside>
      <main className="content">
        <header className="header">
          <h2>Autogenerated from JSDoc comments</h2>
          <time dateTime={generatedAt}>Generated on {formatGeneratedAt(generatedAt)}</time>
        </header>
        {packages.map((pkg) => (
          <section key={pkg.slug} id={pkg.slug} className="package-section">
            <div className="package-header">
              <h2>{pkg.title}</h2>
              {pkg.description ? <p>{pkg.description}</p> : null}
            </div>
            {pkg.classes.map((classDoc) => (
              <section
                key={`${pkg.slug}-${classDoc.name}`}
                id={`${pkg.slug}-${slugify(classDoc.name)}`}
                className="class-section"
              >
                <div className="class-card">
                  <div className="class-header">
                    <h3>{classDoc.name}</h3>
                    <span className="file-path">{classDoc.file}</span>
                    {classDoc.description ? <p>{classDoc.description}</p> : null}
                  </div>
                  <div className="method-list">
                    {classDoc.methods.map((method) => (
                      <MethodCard
                        key={`${classDoc.name}-${method.name}`}
                        method={method}
                        typeIndex={typeIndex}
                        anchorId={`${pkg.slug}-${slugify(classDoc.name)}-${slugify(method.name)}`}
                      />
                    ))}
                  </div>
                </div>
              </section>
            ))}
            {pkg.functions.length > 0 ? (
              <section className="functions-section" aria-label="Utility exports">
                <h3>Utility functions</h3>
                <div className="method-list">
                  {pkg.functions.map((fn) => (
                    <MethodCard
                      key={`${pkg.slug}-fn-${fn.name}`}
                      method={fn}
                      typeIndex={typeIndex}
                      anchorId={`${pkg.slug}-fn-${slugify(fn.name)}`}
                    />
                  ))}
                </div>
              </section>
            ) : null}
            <div className="section-divider" />
          </section>
        ))}
      </main>
    </div>
  );
};

export default App;
