name: test

on:
  pull_request:

jobs:
  coverage:
    permissions:
      contents: read
      pull-requests: write
      checks: write
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - run: npm ci --workspace=apps/akari
      - uses: ArtiomTr/jest-coverage-report-action@v2
        with:
          working-directory: apps/akari
          test-script: npm run test:coverage
        # Publish coverage report to GitHub Pages
      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v5
      - name: Upload coverage to Pages
        if: always()
        uses: actions/upload-pages-artifact@v4
        with:
          path: apps/akari/coverage
      - name: Deploy Pages
        if: always()
        id: deploy
        uses: actions/deploy-pages@v4
      - name: Comment coverage link
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const url = '${{ steps.deploy.outputs.page_url }}';
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const markerPattern = /<!-- jest coverage report action for options/;
            const existing = comments.find(
              (c) => c.user?.login === 'github-actions[bot]' && markerPattern.test(c.body)
            );
            const footer = url
              ? `\n\nHTML coverage report: ${url}`
              : `\n\nHTML coverage report not available`;
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: `${existing.body}${footer}`,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: footer.trim(),
              });
            }
