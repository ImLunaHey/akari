name: test

on:
  pull_request:
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - 'docs/**'
      - '**/docs/**'

jobs:
  discover-unit-workspaces:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.workspace-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: workspace-matrix
        name: Determine unit test workspaces
        shell: bash
        run: |
          set -euo pipefail
          matrix=$(node <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const root = process.cwd();
          const packageJsonPath = path.join(root, 'package.json');
          const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
          const workspacePatterns = Array.isArray(packageJson.workspaces) ? packageJson.workspaces : [];

          const expandPattern = (pattern) => {
            const normalized = String(pattern).replace(/\\/g, '/');
            const segments = normalized.split('/').filter(Boolean);
            if (segments.length === 0) {
              return [];
            }

            const results = [];
            const traverse = (index, parts) => {
              if (index === segments.length) {
                results.push(parts.join('/'));
                return;
              }

              const segment = segments[index];
              if (segment === '*' || segment === '**') {
                const directory = path.join(root, ...parts);
                if (!fs.existsSync(directory) || !fs.statSync(directory).isDirectory()) {
                  return;
                }

                for (const entry of fs.readdirSync(directory, { withFileTypes: true })) {
                  if (entry.isDirectory()) {
                    traverse(index + 1, [...parts, entry.name]);
                  }
                }

                return;
              }

              const nextParts = [...parts, segment];
              const nextPath = path.join(root, ...nextParts);
              if (!fs.existsSync(nextPath)) {
                return;
              }

              traverse(index + 1, nextParts);
            };

            traverse(0, []);
            return results;
          };

          const seen = new Set();
          const workspaces = [];

          for (const pattern of workspacePatterns) {
            for (const workspacePath of expandPattern(pattern)) {
              const packageJsonFile = path.join(root, workspacePath, 'package.json');
              if (!fs.existsSync(packageJsonFile)) {
                continue;
              }

              const workspacePackage = JSON.parse(fs.readFileSync(packageJsonFile, 'utf8'));
              const workspaceName = workspacePackage.name;

              if (typeof workspaceName !== 'string' || workspaceName.length === 0) {
                continue;
              }

              if (seen.has(workspaceName)) {
                continue;
              }

              seen.add(workspaceName);
              workspaces.push({
                workspace: workspaceName,
                path: workspacePath,
                scripts: workspacePackage.scripts ?? {},
              });
            }
          }

          workspaces.sort((a, b) => a.workspace.localeCompare(b.workspace));

          const coverageWorkspaces = workspaces
            .filter(({ scripts }) => typeof scripts['test:coverage'] === 'string')
            .map(({ workspace, path: workspacePath }) => ({ workspace, path: workspacePath }));

          if (coverageWorkspaces.length === 0) {
            throw new Error('No workspaces with a test:coverage script were found in the repository.');
          }

          process.stdout.write(JSON.stringify({ include: coverageWorkspaces }));
          NODE
          )

          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
  unit:
    needs: discover-unit-workspaces
    name: unit (${{ matrix.workspace }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover-unit-workspaces.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24.9.0
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - run: npm ci --prefer-offline
      - name: Run tests with coverage
        run: npm run test:coverage --workspace ${{ matrix.workspace }}
      - name: Prepare coverage artifact metadata
        if: always()
        id: coverage-metadata
        shell: bash
        run: |
          workspace_path='${{ matrix.path }}'
          sanitized="${workspace_path//\//___SLASH___}"
          echo "name=coverage-${sanitized}" >> "$GITHUB_OUTPUT"
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.coverage-metadata.outputs.name }}
          path: ${{ matrix.path }}/coverage
          if-no-files-found: error
  coverage-report:
    name: coverage report
    needs: unit
    if: ${{ needs.unit.result == 'success' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24.9.0
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - run: npm ci --prefer-offline
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
          pattern: coverage-*
      - name: Restore coverage directories
        run: |
          shopt -s dotglob nullglob
          for artifact in coverage-artifacts/*; do
            if [ -d "$artifact" ]; then
              name="${artifact##*/}"
              sanitized="${name#coverage-}"
              workspace_path="${sanitized//___SLASH___//}"
              coverage_dir="$artifact/coverage"

              if [ ! -d "$coverage_dir" ]; then
                echo "Coverage directory not found in $artifact" >&2
                exit 1
              fi

              rm -rf "$workspace_path/coverage"
              mkdir -p "$workspace_path"
              cp -R "$coverage_dir" "$workspace_path/coverage"
            fi
          done
      - name: Merge coverage reports
        run: npm run merge-coverage
      - name: Report coverage
        uses: ./.github/actions/report-coverage
        with:
          github-token: ${{ github.token }}
          coverage-summary: coverage/coverage-summary.json
          coverage-json: coverage/coverage-final.json
          lcov-path: coverage/lcov.info
          artifact-name: coverage-report
          artifact-path: coverage
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24.9.0
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - run: npm ci --prefer-offline
      - run: npx playwright install --with-deps chromium
      - run: npm run test:e2e -- --reporter=github
